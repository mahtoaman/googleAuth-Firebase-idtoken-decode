const express = require("express");
const mongoose = require("mongoose");
const jwt = require("jsonwebtoken");
const { OAuth2Client } = require("google-auth-library");
const userDB = require("./userModel"); // assuming you have a separate module for your user database
require("dotenv").config();

//=====================================================

const admin = require("firebase-admin");

const serviceAccount = require("./config/serviceAccountKey.json");
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
});

//=====================================================

const app = express();

const { CLIENT_ID, CLIENT_SECRET, JWT_SECRET, MONGODB_URI, PORT } = process.env;

const client = new OAuth2Client(CLIENT_ID);

app.use(express.json());

async function verify(client, token) {
  const ticket = await client.verifyIdToken({
    idToken: token,
    audience: CLIENT_ID,
  });
  const payload = ticket.getPayload();
  // console.log(payload)
  return payload;
  // const userid = payload["sub"];
}
console.log(CLIENT_ID);


//=======================decode google auth token generated by google OAUTH2=============
app.get("/authenticate", async (req, res) => {
  try {
    const token = req.query.id_token;
    console.log("token", token);
    const client = new OAuth2Client(CLIENT_ID);
    var x = await verify(client, token).catch(console.error);
    console.log(
      "========================================================================"
    );
    console.log(x);
    res.send(x);
  } catch (error) {
    console.log(error);
    return res.status(500).send({ message: error.message });
  }
});


//===================decode firebase token=========================
app.get("/firebase", async (req, res) => {
  try {
    const idToken = req.query.id_token;
    console.log(idToken)
    admin
      .auth()
      .verifyIdToken(idToken)
      .then((decodedToken) => {
        console.log("Decoded token:", decodedToken);
        res.send(decodedToken)
      })
      .catch((error) => {
        console.error("Error verifying ID token:", error);
        res.send(error)
      });
     
  } catch (error) {
    console.log(error);
    return res.status(500).send({ message: error.message });
  }
});

mongoose
  .connect(MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => {
    console.log("Connected to the database");
    app.listen(PORT, () => {
      console.log(`Server is running on port ${PORT}`);
    });
  })
  .catch((err) => {
    console.error(err);
  });
